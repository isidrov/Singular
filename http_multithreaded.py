import threading
import http.server
import socketserver

class QuietSimpleHTTPRequestHandler(http.server.SimpleHTTPRequestHandler):
    """Quiet http request handler
    Subclasses SimpleHTTPRequestHandler in order to overwrite the log_message
    method, letting us reduce output generated by the handler. Only standard
    messages are overwritten, so errors will still be displayed.
    """
    def log_message(self, *args):
        """Drops messages intended to be printed
        """
        pass

class ThreadedHTTPServer(object):
    """Runs SimpleHTTPServer in a thread
    Lets you start and stop an instance of SimpleHTTPServer.
    """
    def __init__(self, host, port, request_handler=http.server.SimpleHTTPRequestHandler):
        """Prepare thread and socket server
        Creates the socket server that will use the HTTP request handler. Also
        prepares the thread to run the serve_forever method of the socket
        server as a daemon once it is started
        """

        self.server = socketserver.TCPServer((host, port), request_handler)
        self.server_thread = threading.Thread(target=self.server.serve_forever())
        self.server_thread.daemon = True

    def __enter__(self):
        self.start()
        return self

    def __exit__(self, type, value, traceback):
        self.stop()

    def start(self):
        """Start the HTTP server
        Starts the serve_forever method of Socket running the request handler
        as a daemon thread
        """
        self.server_thread.start()

    def stop(self):
        """Stop the HTTP server
        Stops the server and cleans up the port assigned to the socket
        """
        self.server.shutdown()
        self.server.server_close()
